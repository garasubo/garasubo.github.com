<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[garasubo's note]]></title>
  <link href="http://garasubo.github.com/atom.xml" rel="self"/>
  <link href="http://garasubo.github.com/"/>
  <updated>2012-11-20T22:28:08+09:00</updated>
  <id>http://garasubo.github.com/</id>
  <author>
    <name><![CDATA[garasubo]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[gitでのbranchでの開発]]></title>
    <link href="http://garasubo.github.com/blog/2012/11/20/git/"/>
    <updated>2012-11-20T21:49:00+09:00</updated>
    <id>http://garasubo.github.com/blog/2012/11/20/git</id>
    <content type="html"><![CDATA[<p>最近何かとgitを使うことが多くなったので、branchの作り方から
mergeの仕方まできちんと学ばなきゃなと思い立って色々調べた。</p>

<h2>リモートブランチの扱い方</h2>

<p><a href="http://d.hatena.ne.jp/nayutaya/20090519/1242701594">&#8220;gitのリモートブランチを使って作業を行う流れのメモ - 那由多屋 開発日誌&#8221;</a></p>

<h2>merge</h2>

<p>ブランチつくったら、あとでマージしなきゃいけない。
実はgitのマージにはいくつか種類があるらしく、これはきちんと把握しておく必要が有りそう。<br/>
<a href="http://d.hatena.ne.jp/sinsoku/20111025/1319497900">&#8220;図で分かるgit-mergeの&#8211;ff, &#8211;no-ff, &#8211;squashの違い - アジャイルSEを目指すブログ&#8221;</a><br/>
これを読む限り、基本的には&#8211;no&#8211;ffでマージコミットをきちんとつくるのが
あとでログ見返すときにも良さそうな気がする。</p>

<h2>うっかりマージミスした時の対処。</h2>

<p>commitを取り消すコマンドであるresetは使い方を誤るととんでもないことになるので気をつけなければならない。
このへんが参考になりそう。
<a href="http://d.hatena.ne.jp/ToMmY/20110719/1311034743">git で merge をとりけす法 - ToMmY Makes Love with Codes</a><br/>
<a href="http://projects.tsuntsun.net/~nabeken/diary/Sysadmin/git-7.html">~nabeken/diary/ : git で間違って merge してしまった場合 (fast forward でマージしてしまったのを取り消したい)</a></p>

<h2>rebaseコマンドについて</h2>

<p>誰かがrebaseコマンド使えない奴はgit使えるうちに入らないと言っていたので調べた。
コミットに対して直接変更を加えるので危ないことは確かっぽいが、
小さなmergeをしたい時とかはこっちのほうが良いのかもしれない。
少なくとも知っておいて損はないと思うので。<br/>
<a href="http://d.hatena.ne.jp/sinsoku/20110925/1316933393">図で分かるgit-rebase - アジャイルSEを目指すブログ</a></p>

<h2>間違ったブランチを変更してしまった！</h2>

<p>gitならこんなことまで出来るんだって感じ。
記事読んで理解するのにちょっと時間かかった。<br/>
<a href="http://d.hatena.ne.jp/ToMmY/20110914/1316024033">別のトピックブランチにしてしまった複数のコミットを移動する - ToMmY Makes Love with Codes</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sublime Text 2を使ってみる]]></title>
    <link href="http://garasubo.github.com/blog/2012/11/16/st2/"/>
    <updated>2012-11-16T09:55:00+09:00</updated>
    <id>http://garasubo.github.com/blog/2012/11/16/st2</id>
    <content type="html"><![CDATA[<p>こんな記事を見たのがきっかけ<br/>
<a href="http://liginc.co.jp/designer/archives/6774">”恋に落ちるエディタ”「Sublime Text」 完全入門ガイド！ | デザイナーブログ | 株式会社LIG</a></p>

<p>普段はvimを愛用して、たしかに単体のファイルを編集する分にはいいのだが、
ある程度のプロジェクトを管理するために便利なものはないかなあと思っていたが、これは便利そうだなと思った。</p>

<p>導入方法とかはさっきの記事にあるので割愛。<br/>
ただし、package controlのインストールのところだけはなんかコピペじゃうまくいかなかった。
<a href="http://wbond.net/sublime_packages/package_control/installation">公式</a>のところにあるのをコピペしたらうまくいった。</p>

<p>設定として、まずはvimキーバインドを使いたいので、
Preferences > Setting &#8211;Defaultを開き、</p>

<pre><code>"ignored_packages": ["Vintage"]
</code></pre>

<p>とかなっているのを</p>

<pre><code>"ignored_packages": []
</code></pre>

<p>としてやれば、Vintageというパッケージが有効化されvimのコマンドが使えるようになる。<br/>
参考:<a href="http://ginpen.com/2012/07/15/vim-for-sublime-text/">Sublime Text 2をvim風に操作するには、プラグインすら不要でした。設定の変更のみ。</a><br/>
ただし、すべてのコマンドが使えるわけでなく:eとか:qとかは使えない。</p>

<p>あと、タブをスペースに展開したかったので<br/>
<a href="http://d.hatena.ne.jp/soikw/20120603/1338713309">Sublime TextでHaskell編集時のタブをスペース4つにする</a>
にあった設定をSetting &#8211;Usersに追加した。</p>

<p>便利だと思う機能としてCtr-pでのファイルサーチで、
今までだと、あるディレクトリの下にあるファイルとかをそのディレクトリ
名をいちいち入力しなきゃならなかったのが、その手間が省けて便利。</p>

<p>他にもいろいろな便利なショートカットがあるらしく、<br/>
<a href="http://funatti.hatenablog.com/entry/2012/07/13/155629"> Emacs, Vim, Sublime Text 2 徹底比較</a><br/>
とかいう記事がそれなりにまとまっている。</p>

<p>とまあ、便利そうなんだけど、やっぱり新しいツールとだけあって自分はまださぐりさぐりの状態で使っている。<br/>
makeコマンドをsublimeから呼び出したいのだが、build systemとかいうのを使えばできるのか？</p>

<p>あとはgitとかとの連携もできるらしいけど、そのへんもよくわかんない。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress導入記]]></title>
    <link href="http://garasubo.github.com/blog/2012/11/14/new-post/"/>
    <updated>2012-11-14T10:38:00+09:00</updated>
    <id>http://garasubo.github.com/blog/2012/11/14/new-post</id>
    <content type="html"><![CDATA[<p>octopressを導入するまで</p>

<h2>ruby 1.9を導入</h2>

<p>octopressを動かすにはruby 1.9以上が必要。
自分のubuntu 12.04には1.8.7しか入っていなかったのでrvmというものをつかって導入。
rvmとはrubyの複数のバージョンを管理するためのツールで、これを使うとrubyの様々なバージョンをインストールすることが可能。</p>

<p>で、「rvm インストール」とかで検索したらいろいろな方法があるのだが、どうもうまくいかない。
twitterでヘルプを投げたところ@ompugaoさんから教えてもらった方法がうまくいった。</p>

<ol>
<li>curl -L get.rvm.io | bash -s stable</li>
<li>rvm requirementsで必要なパッケージを確認してinstall</li>
<li>rvm install ruby-1.9.3</li>
</ol>


<p>これをやる前にうっかりaptitudeでrvm-rubyをinstallしちゃったら</p>

<pre><code>It looks you are one of the happy Ubuntu users, 
RVM packaged by Ubuntu is old and broken, 
</code></pre>

<p>とか言われる。happyだから仕方ないね。
まあ、解決策もちゃんとでてきて
<a href="http://stackoverflow.com/questions/9056008/installed-ruby-1-9-3-with-rvm-but-command-line-doesnt-show-ruby-v/9056395#9056395">Installed Ruby 1.9.3 with RVM but command line doesn&#8217;t show ruby -v</a>
の言われたとおりにすれば直った。</p>

<p>それで</p>

<pre><code>rvm 1.9.3
</code></pre>

<p>とかすれば、バージョン1.9.3が使える。が、シェルの設定でログインシェルとして使用するとかいうのをチェックしないとうまくいかない。</p>

<h2>octopress導入</h2>

<p><a href="http://blog.glidenote.com/blog/2011/11/07/install-octopress-on-github/">GithubとOctopressでモダンな技術系ブログを作ってみる</a>
あたりを参考にすれば何とかなる。</p>

<p>あとつまずいたのは、実際の記事を書くときになぜかファイルの文字コードがutf-8になっていなくてrake generateでコケたことくらいか。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[start up]]></title>
    <link href="http://garasubo.github.com/blog/2012/11/12/start-up/"/>
    <updated>2012-11-12T23:15:00+09:00</updated>
    <id>http://garasubo.github.com/blog/2012/11/12/start-up</id>
    <content type="html"><![CDATA[<p>できつぁ</p>
]]></content>
  </entry>
  
</feed>
