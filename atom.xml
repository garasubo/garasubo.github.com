<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[garasubo's note]]></title>
  <link href="http://garasubo.github.com/atom.xml" rel="self"/>
  <link href="http://garasubo.github.com/"/>
  <updated>2013-04-18T18:20:33+09:00</updated>
  <id>http://garasubo.github.com/</id>
  <author>
    <name><![CDATA[garasubo]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[markdownをvimで扱う]]></title>
    <link href="http://garasubo.github.com/blog/2013/04/18/mkd-vim/"/>
    <updated>2013-04-18T16:37:00+09:00</updated>
    <id>http://garasubo.github.com/blog/2013/04/18/mkd-vim</id>
    <content type="html"><![CDATA[<p>最近、ノーパで授業ノートを取る機会が増えてきた。
今まではプレーンテキストで何とかしていたのだが、さすがに整形しないとあれなのでmarkdown記法を使うことにした。</p>

<p>そのために以下のプラグインを導入。</p>

<ul>
<li><p><a href="https://github.com/plasticboy/vim-markdown">plasticboy/vim-markdown</a>
  vim用のmarkdownのシンタックスファイル。
  数年前はバグがあるとか叩かれていたみたいだけど、最近も更新されているようなのでそういうことはもうないと思われる。
  少なくとも、僕はまだバグに出会っていない。</p></li>
<li><p><a href="https://github.com/thinca/vim-quickrun">thinca/vim-quickrun</a>
  編集のプログラムをその場でさっと実行するためのプラグイン。
  これを使うことで、markdown記法のテキストをサッと整形してブラウザでプレビューさせることができる。</p></li>
<li><p><a href="https://github.com/tyru/open-browser.vim">tyru/open-browser.vim</a>
  vimから指定したURLをブラウザで立ち上げるプラグイン。
  quickrunと組み合わせて使った。</p></li>
</ul>


<p>これらのプラグインを導入した後、vimrcに以下の記述を追加。</p>

<pre><code>let g:quickrun_config = {}
let g:quickrun_config.mkd = {
            \ 'outputter' : 'browser',
            \   'command': 'pandoc',
            \   'exec': '%c --from=markdown --to=html %o %s %a',
            \ }
</code></pre>

<p>pandocはmarkdownのテキストをhtmlに変換するコマンド。
他にももっといいのがあるらしいのだが、aptで簡単に導入できるので今回はこれを使った。</p>

<p>これで<Leader>rでブラウザで仕上がりがプレビューできる。</p>

<p>参考：<br/>
<a href="http://blog.glidenote.com/blog/2013/01/10/vim-quickrun-marked/">vim-quickrunとMarkedでmarkdown編集が快適になった - Glide Note -グライドノート</a><br/>
<a href="http://vim-users.jp/2011/09/hack230/">Vim-users.jp - Hack #230: Markdown形式の文書を書く2 (quickrun0.5.0対応版)</a></p>

<p>本当はリアルタイムでプレビューとかする方法もあるらしいが、とりあえずこれで満足した。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[tig便利]]></title>
    <link href="http://garasubo.github.com/blog/2013/03/24/tig%E4%BE%BF%E5%88%A9/"/>
    <updated>2013-03-24T15:25:00+09:00</updated>
    <id>http://garasubo.github.com/blog/2013/03/24/tig便利</id>
    <content type="html"><![CDATA[<p>Gitの変更履歴をとても便利に閲覧することができるtigがなかなか。<br/>
詳しくは<a href="http://qiita.com/items/4ce9918b6dd6971d60e4">Tig の表示方法あれこれ #git #AdventCalendar #tig
- Qiita</a></p>

<p>gitkのCUI版みたいなのり。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[VimShellを久々に使ってみたら便利だった]]></title>
    <link href="http://garasubo.github.com/blog/2013/03/03/title/"/>
    <updated>2013-03-03T20:59:00+09:00</updated>
    <id>http://garasubo.github.com/blog/2013/03/03/title</id>
    <content type="html"><![CDATA[<p>以前、VimShellを使おうとして入れてみたのだが、はっきりとした理由は忘れたが、いまいちなので使わなかった。
が、久々に使ってみると普通のシェルのように使えるようになっていた。</p>

<h2>install</h2>

<p><a href="https://github.com/Shougo/vimshell">ここ</a>から</p>

<p>導入にはvimprocが必要で、加えてunite.vimとneocomplcacheがないと、一部の拡張機能が使えない。</p>

<h2>使い方</h2>

<p>:VimShellでshellになる<br/>
インサートモードで入力、コマンドモードでは普通にいつものvimみたいに動いて、
ヤンクとかもできる。<br/>
インサートモードではCtrl+lでコマンドの履歴表示、tabで補完がつかえる。<br/>
:VimShellPopで画面の一部でVimshellが起動するのでちょっとしたコマンドを起動するには便利。</p>

<pre><code>:VimShellInteractive [任意のインタプリタ]
</code></pre>

<p>はスクリプト言語を走らせるのにはかなり便利で、vimで編集しているテキストをそのインタプリタに送りつけるという事ができる。</p>

<p>非同期でコマンドを実行してくれるので、
コンパイルしながらちょっとコードの確認とかいうこともできる。</p>

<p>以前はインタプリタはiexeとかしないと動かなかったんだけど、そういうこともないみたい。</p>

<h2>欠点</h2>

<p>bashrcやzshrcとの連携機能は無いので、そっちで独自の設定をみっちりやっていると使いにくいかもしれない。<br/>
エイリアスくらいなら自動変換ツールくらい誰かつくっていそうなものだが。</p>

<p>コマンドの補完はやはり賢くない気がする。加えて、個人的にneocomlcacheの動作がイマイチだと思ったので普段は使わないのだが、
これを使わないと、ファイル名補完くらいしか効かない。</p>

<p>あと、gnuplot -persistでプロットしたグラフがgnuplot終了後消えてしまった。</p>

<p>とかまあまあ、完全なシェルとしてはさすがに使えないにしても、十分に使う価値のあるツールだとは思う。<br/>
更新も活発だし、作者はzshを目標としているらしいので、これからもどんどん良くなっていくのではないでしょうか。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[git pullをrebaseで行う]]></title>
    <link href="http://garasubo.github.com/blog/2013/02/22/new-post/"/>
    <updated>2013-02-22T14:52:00+09:00</updated>
    <id>http://garasubo.github.com/blog/2013/02/22/new-post</id>
    <content type="html"><![CDATA[<p>複数人でリモートのレポジトリをいじるとリモートの変更を
git pullでひっぱって来ないといけないわけだが、
git pullはremoteの変更をgit fetchして取ってきてから、
その変更を自分の追跡ブランチにmergeをするということをしている。<br/>
そのため、場合によっては無駄にマージコミットができてしまい、気が分岐しているように見えて、
ログの参照性をさげてしまう。<br/>
そこでpull時にmergeの代わりにrebaseを使い、そのようなことを避けるオプションがある。</p>

<pre><code>git pull --rebase
</code></pre>

<p><a href="http://keijinsonyaban.blogspot.jp/2010/11/git-tips.html">見えないチカラ: 【翻訳】あなたの知らないGit Tips</a>によると、</p>

<pre><code>git config --global pull.rebase true
</code></pre>

<p>としてあげると全追跡ブランチでpull時はオプション無しでrebaseを使うようになる。(Git 1.7.9から)</p>

<p>ただし、rebaseでpullしてくると</p>

<pre><code>1. 追跡ブランチからブランチを切る
2. そのブランチに対して追跡ブランチにマージコミットを打つ（その間、追跡ブランチには何もコミットしていない）
3. 追跡ブランチでpull
</code></pre>

<p>とすると、マージコミットが消えて、その追跡ブランチからブランチを切ったという情報が消えてしまった。<br/>
これはマージコミットをリバートするときはどちらを残すか明示的に指定しないといけないように、
どちらが本来の流れか分からなくなるからか？<br/>
にわかだからよくわかりません＞＜</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gitでのミスリカバリー]]></title>
    <link href="http://garasubo.github.com/blog/2012/12/28/new-post/"/>
    <updated>2012-12-28T19:21:00+09:00</updated>
    <id>http://garasubo.github.com/blog/2012/12/28/new-post</id>
    <content type="html"><![CDATA[<h2>マージコミットをリバート</h2>

<p>うっかり間違ったブランチで&#8211;no-ffでmergeを打ってしまった場合、
revertでそのコミットの変更を消すコミットをつくることができる。<br/>
ただし、このときどちらのブランチを残すのかという事を指示してあげる必要がある。<br/>
git logなどで、その時のマージコミットのログを見ると、どのコミット同士をマージしたのかということが書いてある。<br/>
それを見てどちらを残すかを-mオプションで指定する。</p>

<p>詳しくは<a href="http://books.google.co.jp/books?id=8DAvoM4OMxEC&amp;printsec=frontcover&amp;hl=ja#v=onepage&amp;q&amp;f=false">ここ</a>の80ページ目あたりが親切。</p>

<h2>リモートレポジトリに対してリセットをする</h2>

<p><a href="http://tmtms.hatenablog.com/entry/20101221/git">Gitでリモートリポジトリを巻き戻す - @tmtms のメモ</a>を参考にした。</p>

<p>まず、リセットしたいレポジトリのバックアップレポジトリをつくる。<br/>
これはいざ間違えた時の対策。</p>

<pre><code>git push origin tar_bak
</code></pre>

<p>つづいてgit reflogして戻したい地点を見つける</p>

<pre><code>******* HEAD@{0}: hoge
******* HEAD@{1}: hogehoge
******* HEAD@{2}: hogehogehoge
******* HEAD@{3}: hogehogehogehoge
...
</code></pre>

<p>hogehogehogeの地点まで戻りたいとして、</p>

<pre><code>git push -f origin HEAD@{2}:tar
</code></pre>

<p>とすればよい。こうすると、origin/tarの指すコミットが移動する。</p>

<p>他の人にも影響することなので、やるときは注意。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ubuntuのgccでリンクのオプションが無視される問題について]]></title>
    <link href="http://garasubo.github.com/blog/2012/11/26/new-post/"/>
    <updated>2012-11-26T14:17:00+09:00</updated>
    <id>http://garasubo.github.com/blog/2012/11/26/new-post</id>
    <content type="html"><![CDATA[<p>Ubuntuを10.04から12.04にアップデートした際、
gccで-lで指定したファイルが全然リンクされないという問題があった。
たとえば、</p>

<pre><code>gcc -lm main.c
</code></pre>

<p>として、main.cで普通にmathライブラリを使うようなファイルを書くと、
そんな関数の実体見つからんよ、と怒られていた。</p>

<p>ちょっと検索したらこんなの見つかった。<br/>
<a href="https://forums.ubuntulinux.jp/viewtopic.php?id=13673">Ubuntu日本語フォーラム / math.h へのリンクがうまくいかない</a><br/>
どうやら、Ubuntuのあるバージョンからgccの&#8211;as-neededというオプションが
デフォルトで有効になるような親切設計になったらしく、
これがあると-lのオプションはソースファイルの後に置かないと無視されるようになるらしい。
なので、</p>

<pre><code>gcc main.c -lm
</code></pre>

<p>とすればいいのだが、makeの暗黙ルールでLDFLAGSはソースの前に置かれるようなっているので、なんかルール書き換えるのは癪。</p>

<p>そこで、LDFLAGSに</p>

<pre><code>-Wl,--no-as-needed
</code></pre>

<p>というオプションを追加してやると、&#8211;as-neededオプションが無効化された。</p>

<p>しかし、なんでこんなオプションをデフォルトで有効にしてしまったのか。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[gitでのbranchでの開発]]></title>
    <link href="http://garasubo.github.com/blog/2012/11/20/git/"/>
    <updated>2012-11-20T21:49:00+09:00</updated>
    <id>http://garasubo.github.com/blog/2012/11/20/git</id>
    <content type="html"><![CDATA[<p>最近何かとgitを使うことが多くなったので、branchの作り方から
mergeの仕方まできちんと学ばなきゃなと思い立って色々調べた。</p>

<h2>リモートブランチの扱い方</h2>

<p><a href="http://d.hatena.ne.jp/nayutaya/20090519/1242701594">&#8220;gitのリモートブランチを使って作業を行う流れのメモ - 那由多屋 開発日誌&#8221;</a></p>

<h2>merge</h2>

<p>ブランチつくったら、あとでマージしなきゃいけない。
実はgitのマージにはいくつか種類があるらしく、これはきちんと把握しておく必要が有りそう。<br/>
<a href="http://d.hatena.ne.jp/sinsoku/20111025/1319497900">&#8220;図で分かるgit-mergeの&#8211;ff, &#8211;no-ff, &#8211;squashの違い - アジャイルSEを目指すブログ&#8221;</a><br/>
これを読む限り、基本的には&#8211;no&#8211;ffでマージコミットをきちんとつくるのが
あとでログ見返すときにも良さそうな気がする。</p>

<h2>うっかりマージミスした時の対処。</h2>

<p>commitを取り消すコマンドであるresetは使い方を誤るととんでもないことになるので気をつけなければならない。
このへんが参考になりそう。<br/>
<a href="http://d.hatena.ne.jp/ToMmY/20110719/1311034743">git で merge をとりけす法 - ToMmY Makes Love with Codes</a><br/>
<a href="http://projects.tsuntsun.net/~nabeken/diary/Sysadmin/git-7.html">~nabeken/diary/ : git で間違って merge してしまった場合 (fast forward でマージしてしまったのを取り消したい)</a></p>

<h2>rebaseコマンドについて</h2>

<p>誰かがrebaseコマンド使えない奴はgit使えるうちに入らないと言っていたので調べた。
コミットに対して直接変更を加えるので危ないことは確かっぽいが、
小さなmergeをしたい時とかはこっちのほうが良いのかもしれない。
少なくとも知っておいて損はないと思うので。<br/>
<a href="http://d.hatena.ne.jp/sinsoku/20110925/1316933393">図で分かるgit-rebase - アジャイルSEを目指すブログ</a></p>

<h2>間違ったブランチを変更してしまった！</h2>

<p>gitならこんなことまで出来るんだって感じ。
記事読んで理解するのにちょっと時間かかった。<br/>
<a href="http://d.hatena.ne.jp/ToMmY/20110914/1316024033">別のトピックブランチにしてしまった複数のコミットを移動する - ToMmY Makes Love with Codes</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sublime Text 2を使ってみる]]></title>
    <link href="http://garasubo.github.com/blog/2012/11/16/st2/"/>
    <updated>2012-11-16T09:55:00+09:00</updated>
    <id>http://garasubo.github.com/blog/2012/11/16/st2</id>
    <content type="html"><![CDATA[<p>こんな記事を見たのがきっかけ<br/>
<a href="http://liginc.co.jp/designer/archives/6774">”恋に落ちるエディタ”「Sublime Text」 完全入門ガイド！ | デザイナーブログ | 株式会社LIG</a></p>

<p>普段はvimを愛用して、たしかに単体のファイルを編集する分にはいいのだが、
ある程度のプロジェクトを管理するために便利なものはないかなあと思っていたが、これは便利そうだなと思った。</p>

<p>導入方法とかはさっきの記事にあるので割愛。<br/>
ただし、package controlのインストールのところだけはなんかコピペじゃうまくいかなかった。
<a href="http://wbond.net/sublime_packages/package_control/installation">公式</a>のところにあるのをコピペしたらうまくいった。</p>

<p>設定として、まずはvimキーバインドを使いたいので、
Preferences > Setting &#8211;Defaultを開き、</p>

<pre><code>"ignored_packages": ["Vintage"]
</code></pre>

<p>とかなっているのを</p>

<pre><code>"ignored_packages": []
</code></pre>

<p>としてやれば、Vintageというパッケージが有効化されvimのコマンドが使えるようになる。<br/>
参考:<a href="http://ginpen.com/2012/07/15/vim-for-sublime-text/">Sublime Text 2をvim風に操作するには、プラグインすら不要でした。設定の変更のみ。</a><br/>
ただし、すべてのコマンドが使えるわけでなく:eとか:qとかは使えない。</p>

<p>あと、タブをスペースに展開したかったので<br/>
<a href="http://d.hatena.ne.jp/soikw/20120603/1338713309">Sublime TextでHaskell編集時のタブをスペース4つにする</a>
にあった設定をSetting &#8211;Usersに追加した。</p>

<p>便利だと思う機能としてCtr-pでのファイルサーチで、
今までだと、あるディレクトリの下にあるファイルとかをそのディレクトリ
名をいちいち入力しなきゃならなかったのが、その手間が省けて便利。</p>

<p>他にもいろいろな便利なショートカットがあるらしく、<br/>
<a href="http://funatti.hatenablog.com/entry/2012/07/13/155629"> Emacs, Vim, Sublime Text 2 徹底比較</a><br/>
とかいう記事がそれなりにまとまっている。</p>

<p>とまあ、便利そうなんだけど、やっぱり新しいツールとだけあって自分はまださぐりさぐりの状態で使っている。<br/>
makeコマンドをsublimeから呼び出したいのだが、build systemとかいうのを使えばできるのか？</p>

<p>あとはgitとかとの連携もできるらしいけど、そのへんもよくわかんない。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress導入記]]></title>
    <link href="http://garasubo.github.com/blog/2012/11/14/new-post/"/>
    <updated>2012-11-14T10:38:00+09:00</updated>
    <id>http://garasubo.github.com/blog/2012/11/14/new-post</id>
    <content type="html"><![CDATA[<p>octopressを導入するまで</p>

<h2>ruby 1.9を導入</h2>

<p>octopressを動かすにはruby 1.9以上が必要。
自分のubuntu 12.04には1.8.7しか入っていなかったのでrvmというものをつかって導入。
rvmとはrubyの複数のバージョンを管理するためのツールで、これを使うとrubyの様々なバージョンをインストールすることが可能。</p>

<p>で、「rvm インストール」とかで検索したらいろいろな方法があるのだが、どうもうまくいかない。
twitterでヘルプを投げたところ@ompugaoさんから教えてもらった方法がうまくいった。</p>

<ol>
<li>curl -L get.rvm.io | bash -s stable</li>
<li>rvm requirementsで必要なパッケージを確認してinstall</li>
<li>rvm install ruby-1.9.3</li>
</ol>


<p>これをやる前にうっかりaptitudeでrvm-rubyをinstallしちゃったら</p>

<pre><code>It looks you are one of the happy Ubuntu users, 
RVM packaged by Ubuntu is old and broken, 
</code></pre>

<p>とか言われる。happyだから仕方ないね。
まあ、解決策もちゃんとでてきて
<a href="http://stackoverflow.com/questions/9056008/installed-ruby-1-9-3-with-rvm-but-command-line-doesnt-show-ruby-v/9056395#9056395">Installed Ruby 1.9.3 with RVM but command line doesn&#8217;t show ruby -v</a>
の言われたとおりにすれば直った。</p>

<p>それで</p>

<pre><code>rvm 1.9.3
</code></pre>

<p>とかすれば、バージョン1.9.3が使える。が、シェルの設定でログインシェルとして使用するとかいうのをチェックしないとうまくいかない。</p>

<h2>octopress導入</h2>

<p><a href="http://blog.glidenote.com/blog/2011/11/07/install-octopress-on-github/">GithubとOctopressでモダンな技術系ブログを作ってみる</a>
あたりを参考にすれば何とかなる。</p>

<p>あとつまずいたのは、実際の記事を書くときになぜかファイルの文字コードがutf-8になっていなくてrake generateでコケたことくらいか。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[start up]]></title>
    <link href="http://garasubo.github.com/blog/2012/11/12/start-up/"/>
    <updated>2012-11-12T23:15:00+09:00</updated>
    <id>http://garasubo.github.com/blog/2012/11/12/start-up</id>
    <content type="html"><![CDATA[<p>できつぁ</p>
]]></content>
  </entry>
  
</feed>
