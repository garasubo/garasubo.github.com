<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[garasubo's note]]></title>
  <link href="http://garasubo.github.com/atom.xml" rel="self"/>
  <link href="http://garasubo.github.com/"/>
  <updated>2014-12-24T22:56:29+09:00</updated>
  <id>http://garasubo.github.com/</id>
  <author>
    <name><![CDATA[garasubo]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[あなたとHexo]]></title>
    <link href="http://garasubo.github.com/blog/2014/12/25/hexo/"/>
    <updated>2014-12-25T07:44:26+09:00</updated>
    <id>http://garasubo.github.com/blog/2014/12/25/hexo</id>
    <content type="html"><![CDATA[<p>Octopressの動作が最近よくわからないけど不安定なのと、
どこかでHexoいいよという話を聞いたので、このブログのHexo移転を考えている。</p>

<p><a href="http://hexo.io/">Hexo</a></p>

<p><a href="http://liginc.co.jp/web/programming/server/104594">所要時間3分!? Github PagesとHEXOで爆速ブログ構築してみよう！ | 株式会社LIG</a></p>

<p><a href="http://www.techelex.org/octopress-vs-hexo/">Octopress vs Hexo</a></p>

<p>Octopressからの移行は楽で、記事のmarkdownファイルを移動してきて、configをいじってあげればよい。</p>

<p><a href="http://hexo.io/docs/migration.html">Migration | Hexo</a></p>

<p>それで新しくつくったブログがこちら。
もうちょっとしたらこちらに移す。</p>

<p><a href="http://garasubo.github.com/hexo">新しいブログ</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[論文紹介ー"User-guided Device Driver Synthesis"]]></title>
    <link href="http://garasubo.github.com/blog/2014/12/07/advent/"/>
    <updated>2014-12-07T21:38:00+09:00</updated>
    <id>http://garasubo.github.com/blog/2014/12/07/advent</id>
    <content type="html"><![CDATA[<p><a href="http://www.adventar.org/calendars/440">システム系論文紹介 Advent Calendar 2014</a>の7日目の記事です。</p>

<h2>論文概要</h2>

<ul>
<li>タイトル： User-guided device driver synthesis</li>
<li>著者：Leonid Ryzhyk, Adam Walker, John Keys, Alexander Legg, Arun Raghunath, Michael Stumm, Mona Vij</li>
<li>会議：11th USENIX Symposium on Operating Systems Design and Implementation</li>
<li>URL： <a href="https://www.usenix.org/system/files/conference/osdi14/osdi14-paper-ryzhyk.pdf">https://www.usenix.org/system/files/conference/osdi14/osdi14-paper-ryzhyk.pdf</a></li>
</ul>


<p>デバイスドライバをユーザーが指示を出しつつ半自動でデバイスドライバを合成するツールTermiteというものを提案しています。
この著者はこのTermiteというツールを<a href="http://doi.acm.org/10.1145/1629575.1629583">Automatic Device Driver Synthesis with Termite</a>という論文で
その2つのやり取りをオートマトンとしてみて、その上で行なわれるゲームの必勝法としてデバイスドライバの合成をしてやろうというものです。</p>

<p>当初は完全自動だったのですが、現代の科学では完全自動だと厳しいものがあると悟った著者らがユーザーの入力補助をうまく取り入れるという
方針に変えてこのような形になったようです。
この論文は今までやってきたことのまとめ、という形になっているようです。</p>

<h2>Specificationの書き方</h2>

<p>このTermiteへの入力として必要なのはdriver, device, OSそれぞれのmodelのspecificationです。
これはTermite Specification Language（TSL）によって与えられます。</p>

<p>TSLの具体例は論文にあります。</p>

<h3>Device model</h3>

<p>デバイスの動作についてのモデルです。
デバイスがどのように動くかは
デバイスのデザイナーが持っているはずのtransaction-level models（TLM）から簡単にわかります。
ただし、ベンダーが非公開にしている場合も多く、TLM to TSLのコンパイラも開発中とのこと。</p>

<p>デバイスモデルを仕様書から書き起こす方法についてはSOSPの論文の方に詳しく議論されていましたが、この論文ではされていませんでした。</p>

<h3>OS model</h3>

<p>OSがドライバに向けて発行するAPIを構築するためのモデルです。
イーサーネットならパケットを送るとか受け取るとかそんな感じです。</p>

<h3>DeviceとOSモデルをつなげる</h3>

<p>このデバイスとOSの定義の関係する状態を結びつける必要があるのですが、
この2つの定義をできるだけ独立に保ちたいという要請もあります。</p>

<p>そこで、virtual interfaceというものを導入しています。
これはデバイスモデルの重要なイベントをOSに通知するコールバックみたいなものです。
これは実際に合成されるデバイスドライバの動作というわけではなく、
これで定義を与えてやろうというものです。</p>

<p>また、ドライバの動きを制限するassertや、ドライバがどこに向かっていくのかを定義するgoalというものも定めることができます。</p>

<h3>ドライバテンプレート</h3>

<p>OSが実際に呼び出す関数を定めるテンプレートです。</p>

<h2>User-guided code generation</h2>

<p>コードの合成はIDEで編集するという感じでおこなわれます。
このIDEの機能としてgeneratorとverifierがあります。
generatorが自動補完のように現在の入力位置にモデルから合成したコードを埋め込むことができます。
もちろん、合成したコードに対しての変更も可能です。
verifierが書かれたコードが定義に合っているかどうかをチェックします。</p>

<h2>Synthesis</h2>

<p>モデル間の合成なのですが、これはデバイス・OSとドライバ間でおこなわれるゲームと見立てることでおこなわれます。
ゲームの状態を有限オートマトンとして、状態遷移はコントロール可能なものとドライバやOSが勝手に行うコントロール不可能なものの2つです。
このゲームに勝つ戦略、すなわちなってはならない状態に陥らないように行動するのがドライバで、これを合成するというわけです。
このゲームに勝つ戦略がそもそも存在しない場合、合成は失敗となります。</p>

<p>この合成は下手に行うと状態数爆発を起こしたりと厄介なのですが、
それを起こさないため、筆者は様々な工夫をしています。</p>

<p>詳しいことを書いているとキリが無いので、ここでは省略します。
また、この論文より他の関連する論文のほうが詳しく書かれているようです。
（私は読んでいません）</p>

<h2>Debugging with counterexamples</h2>

<p>このゲームベースの合成に失敗した時のデバッグ支援方法もTermiteは備えています。
ゲームに勝つ戦略を妨げている環境の振る舞い、counterexample strategiesを探します。
これはこのゲームの双対ゲームを解くことで得られます。
このcounterexample strategyをステップ実行することで、デバッグを支援します。</p>

<h2>Limitations of Termite</h2>

<ul>
<li>DMAを扱えない

<ul>
<li>状態数が爆発する</li>
</ul>
</li>
<li>デバイスコントロールとは本質的に関係ないところは他の手法を使うことで簡単に合成できるが、現在のところでは手動で埋め込むしかない</li>
<li>並列処理への対応ができない</li>
<li>リアルタイム性の保障はできないので、ハードリアルタイムなドライバはつくれない</li>
</ul>


<h2>Implementation and evaluation</h2>

<p>このTermite、Haskellのコードおよそ3万行で10人年かかっているとのこと。
USBのwebカメラ、UARTのシリアルコントローラなどを実際に実装して評価しています。
各デバイスドライバに実装するのに1週間ほど（ドキュメントを読んでデバイスの仕様を調べる時間も含まれている）とのこと。</p>

<p>合成アルゴリズムも、提案している手法と従来手法を比べ、従来手法だと2時間以内に終わらなかったものが、1分〜10分ほどで終わっていることが示されています。
verificationはまだ最適化されていないため、合成より時間はかかっていますが、それでも最大でも13分ほどしかかかっていません。</p>

<p>実際に出来上がるドライバはどうしても手動での最適化や変更が必要なのですが、60%〜90%は自動で合成できたようです。</p>

<p>また、できあがったコードサイズなのですが、これも全体的に小さくなっています。
これは、このドライバがデバイス動かすロジックに集中していること、
普通のデバイスドライバはコードの再利用などを考えて冗長になっていることなどが挙げられるようです。</p>

<p>この方法では定義の再利用が可能というのが1つの売りなのですが、これについてもOSを変えたることで試しています。
これも定義をほとんど変えることなく再利用できたとしています。</p>

<p>パフォーマンスもほぼ同等とのことです。</p>

<h2>まとめと私見</h2>

<p>Termiteというデバイスドライバ合成ツールについての論文でした。
形式的手法を用いて定義からドライバを合成し、さらにそのデバッグについても形式的手法を用いて支援しているというのはおもしろいと思い、今回この論文を紹介しました。
私自身、デバイスドライバを書いたことは一切なく、専門分野でもなく少々準備が甘くなりつたない文章となってしまいましたが、
ご指摘・マサカリ等ありましたら、コメントお願いします。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[UbuntuにインストールされたVMware Playerをアンインストール]]></title>
    <link href="http://garasubo.github.com/blog/2014/10/07/vmware/"/>
    <updated>2014-10-07T10:28:00+09:00</updated>
    <id>http://garasubo.github.com/blog/2014/10/07/vmware</id>
    <content type="html"><![CDATA[<p>タイトルの通り。aptで入れたわけでないのでどうするのかなあと思ったら、
<code>vmware-uninstall</code>ってコマンドあったから打ってみたところ、</p>

<pre><code>The vmware-uninstall* scripts have been deprecated.  Instead, please use
the vmware-installer.

Long form:
  vmware-installer --uninstall-product PRODUCT
Short form:
  vmware-installer -u PRODUCT
</code></pre>

<p>とのこと。</p>

<p>なのでおとなしく、<code>vmware-installer --uninstall-product vmware-player</code>と入れたら消えたみたい。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android開発あれこれ]]></title>
    <link href="http://garasubo.github.com/blog/2014/09/27/android/"/>
    <updated>2014-09-27T10:52:32+09:00</updated>
    <id>http://garasubo.github.com/blog/2014/09/27/android</id>
    <content type="html"><![CDATA[<p>Android開発したときのあれこれをまとめ</p>

<h1>Android Studio</h1>

<p><a href="https://developer.android.com/sdk/installing/studio.html">Android Studio | Android Developers</a></p>

<p>公式のSDK。IntelliJベースで、補完とかがとても優秀。
Viプラグインも結構気に入っている。
gitignoreとかもデフォルトでちゃんとしていたりと。
ビルドツールもなかなかよい。
ただし、gitプラグインの使い勝手はイマイチ。
まあ、それは別の方法で叩けばいいだけの話であって、
これなしでのAndroid開発は考えられない。</p>

<h1>シミュレータ</h1>

<p>実機で走らせるとデバッグ実行できなかったりと色々と不都合なので、
シミュレータを使うことになる。
しかし、とっても遅くて使い物にならないとまでは言わないが、ストレスがたまる。
WindowsとMac用にはIntell製のシミュレータが用意されていてSDKマネージャーからインストールでき、それを使えばそこそこ速いらしい。
しかし、自分はUbuntu使っているので、この方法は使えなかった。</p>

<p>他の方法ではGenymotionというシミュレータがあり、こちらのほうが高速との評価をちらちら見る。</p>

<p><a href="http://www.genymotion.com/">Genymotion</a></p>

<p>こちらは、Virtualbox上で動作する仮想化環境。こちらはUbuntuにも対応しているが、まだ試したことはない。
Macbookでは試したが、確かに高速。
ダウンロードに個人情報要求されたりするのが癪ではある。
トラップとして謎のバグが存在しており、何回かデバッグ実行するとエラーを吐いてアプリが突然死するというものがある。
そうなった場合は再起動しなければならない。</p>

<h1>ユニットテスト</h1>

<p>Robolectricというのを使った。</p>

<p><a href="http://blog.yohei.org/android-studio-gradle-robolectric1/">【Android】Android Studio + Gradle + Robolectric！でテストをしよう | Yohei Blog</a></p>

<p><a href="https://github.com/robolectric/deckard-gradle/">robolectric_deckard-gradle · GitHub</a></p>

<p>ここらへんを見ながらなんとか導入。
罠なのが、Android Studioが勝手にパッケージ宣言を補完してくるところで、これがあるとテストが動かない。
<code>gradle check</code>コマンドで簡単にテストできる。ターミナルで実行するよりSDKから叩いたほうが高速（理由はよく知らないけど中間ファイルか何かを再利用していたりするのか）。
画面遷移等もチェックできるらしのだが、そこまではよく分からなかった。
しかし、Shared PreferenceとかAndroid固有の機能が絡んでくる動作もちゃんとテスト出来るのはうれしい。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ICPC2014参戦記]]></title>
    <link href="http://garasubo.github.com/blog/2014/07/12/icpc/"/>
    <updated>2014-07-12T19:16:00+09:00</updated>
    <id>http://garasubo.github.com/blog/2014/07/12/icpc</id>
    <content type="html"><![CDATA[<p>ICPC2014国内予選参加しました。
結果は5完の24位でアジア地区予選には自明に進めないのでここでおしまい。</p>

<h1>解いた問題と方針</h1>

<p>相方にAを任している間に、C,Eの実装を考えて、
Aが終わった後、Cを通す。
疲れたので相方にBを任せている間に、Dの方針を聞いたり他の問題考えていた。
Bが終わった後、DとEを連続して実装して通す。
F、Gは歯がたちませんでした。</p>

<h2>C問題</h2>

<p>はじめは二部探索かな、と思ったが、判定関数考えているうちに直接求まることに気がつく。</p>

<p>まず、各々のx軸上の区間のビルの高さの最大値を求める。ビルが存在しなければ0とする。
i&lt;=0となるような[i-1,i]区間ではx=iの地点がより太陽が先に見えてしまう。
i>0となるような[i-1,i]区間ではx=i-1の地点がより太陽が先に見える。
よってそれぞれの区間について、太陽が先に見えるx座標とそこの高さに円が到達する時間を求める。
そのうち最小のものが答えとわかる。</p>

<p>r&lt;=20という制限により、区間中に存在するビルの高さの最大値は愚直に求まり、
到達する時間については2次方程式をさくっと解くだけ。</p>

<h2>D問題</h2>

<p>相方から聞いた方針を具体化しただけ。</p>

<p>文字数がたかだか20なので、各文字について変換されたorされないと仮定して復号化、それを暗号化してちゃんと元に戻るかを計算すれば大丈夫、
というもので実装した。
各文字について変換したかどうかをビットマスクで表現して、’z’を復号化するときだけは例外処理。
ちゃんと元に戻った文字列は記録し、最後にソートして出力。</p>

<p>ただ、この方針、すぐには実装できるのだが、最大で2<sup>20</sup>*20*25の計算となり、500000000くらいとなり、普通のプロコンだと通用しない計算量となってしまった。
（暗号化するかしないかのパターンで2<sup>20</sup>通り、暗号化で20*25の処理が入る）
ただ、ICPCは制限時間が無く、手元で実行し出力ファイルを提出すればいいだけなので、
出力を待っている間、他の問題を実装していれば問題なく正解をもらえた。</p>

<p>もうちょい何とかするとすると、暗号化するところの処理を文字の出現位置とかをメモすることで高速化するか、
DFSとかで暗号化できないような文字列は探索しないようにすることでそもそも判定の手間を減らすとかか。
あと、ビットマスクの探索順を工夫すれば最後のソートはいらない。
まあ、いずれも実装が複雑化しそうなので、これはこれでよかったのかなあ。</p>

<h2>E問題</h2>

<p>自明に木構造をしているので、木DP的な何かかなと当たりをつける。
ノード数が300と少ないので、全ての点について根であると仮定した場合で回しても十分間に合いそう。
終点についてもそれぞれについて終点としてみて試せば300*300*300で間に合うんじゃないか、となったが、
擬似コード書き始める時点で、終点を固定して探索するの厄介だなあと考え、もうちょっと考えなおしてみる。</p>

<p>そこで、始点と終点が同じであるパターンからまず考える。
始点をAとしておく。
葉、つまりこの先に何もない島につながっている橋はわざわざ渡る必要もなく、即座に撤去すれば良い。
そうではない島(Bとおく)につながっている橋は、まず、Bより先にある橋を撤去する必要があるので、一度その橋をわたらなければならない。
Bについても、Aに戻るためには同じ橋を渡らなければならないので即座には撤去できず、Bよりも先にある橋を全て撤去してBに戻り、
Aに戻り、やっとA-B間の橋を撤去出来る。
つまり、ある島を始点とした場合、それを根にした木と考えた時、葉をつなぐ橋は即座に撤去し、そうでない橋は2回渡った後撤去することで、
全ての橋を撤去できる。始点と終点が同じならこれが最小コストのはずだ。</p>

<p>始点と終点が異なる場合、最後に終点まで行くとき、そのパス上にある橋を渡ることになるが、この時、戻る必要性がないので、渡った時点で即撤去できる。
つまり、始点と終点が異なる場合、始点から終点までのパス長ぶん戻るコストを節約できるという訳である。
よって、始点と終点が異なる場合の最終コストは始点を固定した場合、その始点から最も長い長さの葉ではない島を終点とした時である。</p>

<p>コードとしては、DFSで始点と終点が同じと仮定した場合のコストを計算しつつ、始点からその島までのコストを持つことで最も遠い島を探すようなコードになった。
最も遠い島に関してと始点と終点が同じ時のコストを計算するDFSを分けてもDFS1回の計算量が高々ノード数程度なので、十分に間に合う。</p>

<h1>感想・反省</h1>

<p>3度目の参戦となり、今までの反省を活かせたんじゃないかなと思っている。
1度目は個人としての能力があまりにも低すぎた＆相方がガチ勢だったので、足を引っ張るだけのゴミだったのだが、
2度目は自分の能力もそれなりについて、相方もほぼ同レベルだったが、結構足を引っ張ってしまったと反省していた。
原因はちゃんと実装を細かいレベルで考えていなかったことで、
方針は立っても細かいところでつまり1台しか使えないパソコンをかなり占有してしまった。</p>

<p>今回は相方が実装している間に、実装の細かいところをじっくりと考えたので、実装はかなり早く終わったのではないかな、と思っている。
前回の僕であれば、Eで始点・終点それぞれ固定して探索しようで行けると思い込んで実装に詰まっているところだった。
あと、チーム全体和やかな雰囲気だったので、練習量も個人の能力もそこそこだった割にはいい成績を残せたのかなと。</p>

<p>ただ、今回も反省はあって、入出力パターンの確認はしっかりやるべきだった。
これで1回躓いてしまった。ロスは小さかったかもしれないが、やはり、事前に意識すべき範囲であった。</p>

<h1>まとめ</h1>

<p>ICPCにおいて最も重要なこと、それはパーフェクト・ハーモニー、完全調和だ！</p>

<p>（強い人に怒られそう）</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vimでコードリーティング]]></title>
    <link href="http://garasubo.github.com/blog/2014/04/19/code-reading/"/>
    <updated>2014-04-19T22:11:00+09:00</updated>
    <id>http://garasubo.github.com/blog/2014/04/19/code-reading</id>
    <content type="html"><![CDATA[<p>C言語で書かれた比較的大きなプログラムを読むことになったので、
やり方をちょっと調べながら試している。</p>

<p>今まではVim+ctagsでタグジャンプして読み進めるで対応していたが、
大きめで呼出がアッチコッチ飛ばされたりするとなかなかつらい。
また、一度読んだところも頭に入らず、もう一度読むという事もしばしば。</p>

<p>ということで、この辺を参考にする<br/>
<a href="http://blog.matsumoto-r.jp/?p=2369">人間とウェブの未来 &ndash; GNU GLOBALとvimで巨大なコードでも快適にコードリーディング</a><br/>
<a href="http://testnoda.sakura.ne.jp/index.php?plugin=attach&amp;refer=testnoda%2F%E3%83%9A%E3%83%BC%E3%82%B8%E4%BD%9C%E8%80%85&amp;openfile=%E3%81%B2%E3%82%89%E3%83%A1%E3%82%BD%E3%83%83%E3%83%89%E5%88%9D%E5%BF%83%E8%80%85%E5%A5%AE%E9%97%98%E8%A8%98.pdf">ひらメソッド初心者奮闘記（PDF）</a></p>

<p>ひらメソッドっていうのは、コードを読みながら、
関数ごとにwikiのページをつくって、ボトムアップに読んで行きましょうというもの。
コードを読む時、GNU GLOBALとVimを連携させることで、定義にポンポン飛べる。</p>

<p>で、wikiなのだが、pukiwikiを使って管理しろみたいなページを結構見かけたけど、
環境構築面倒だし、pukiwikiは更新止まっているとかいう噂も聞いたしで気が進まない。
なので、Vimwikiを使うことにした。<br/>
<a href="http://nanasi.jp/vim/vimwiki.html">Vimwiki : Vimエディタ上で動作するWiki環境</a></p>

<p>僕がVimwikiを導入した時、なぜかページを編集するたびエラー吐いて何かなあと思ったら、
シンタックスファイルで使われているoptionsとかいう変数が
他のプラグインと衝突していたらしく、
optionsをvimwiki_optionsとかに置換したらなおった。</p>

<p>まだ、手探り感あって上手くいくかわからんが、とりあえずこれで。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Eigenで疎行列を扱う]]></title>
    <link href="http://garasubo.github.com/blog/2013/07/10/eigen-sparse/"/>
    <updated>2013-07-10T19:38:00+09:00</updated>
    <id>http://garasubo.github.com/blog/2013/07/10/eigen-sparse</id>
    <content type="html"><![CDATA[<p>ある方程式とかを解くときに、行列をつくるということはよくやるが、
その内の非ゼロ要素が極端に少ない場合、行列がムダにおおきくなってしまうので、
疎行列用のクラスを使ってやる必要がある。</p>

<p>Eigenの場合、SparseMatrixという疎行列クラスがあるので、これを使えば行列のように
簡単に扱えて便利だった。
boostとかにも疎行列用のクラスはあるのだが、どこのサイトで見たか忘れたが、各種ライブラリと速度比較してEigenはかなり優秀だそうで。</p>

<p>検索しても情報が少ないが、公式のチュートリアルとリファレンスが最もまともな資料だった（ともに英語）。<br/>
<a href="http://eigen.tuxfamily.org/dox/TutorialSparse.html">Tutorial page 9 &ndash; Sparse Matrix</a><br/>
<a href="http://eigen.tuxfamily.org/dox/classEigen_1_1SparseMatrix.html">SparseMatrix&lt; <em>Scalar, </em>Options, _Index > Class Template Reference</a></p>

<p>要素のセット方法を探すのに結構手間取った。
個別に要素をセットするときはinsertメソッドを使い、
まとめてセットするならTutorialのFirst
Exampleにあるみたいに、Eigen::Tripletのvectorをつくってから、setFormTripletsでやるのが楽かなって感じ。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Markdownをvimで扱う]]></title>
    <link href="http://garasubo.github.com/blog/2013/04/18/mkd-vim/"/>
    <updated>2013-04-18T16:37:00+09:00</updated>
    <id>http://garasubo.github.com/blog/2013/04/18/mkd-vim</id>
    <content type="html"><![CDATA[<p>最近、ノーパで授業ノートを取る機会が増えてきた。
今まではプレーンテキストで何とかしていたのだが、さすがに整形しないとあれなのでmarkdown記法を使うことにした。</p>

<p>そのために以下のプラグインを導入。</p>

<ul>
<li><a href="https://github.com/plasticboy/vim-markdown">plasticboy/vim-markdown</a></li>
</ul>


<p>vim用のmarkdownのシンタックスファイル。
数年前はバグがあるとか叩かれていたみたいだけど、最近も更新されているようなのでそういうことはもうないと思われる。
少なくとも、僕はまだバグに出会っていない。</p>

<ul>
<li><a href="https://github.com/thinca/vim-quickrun">thinca/vim-quickrun</a></li>
</ul>


<p>編集のプログラムをその場でさっと実行するためのプラグイン。
これを使うことで、markdown記法のテキストをサッと整形してブラウザでプレビューさせることができる。</p>

<ul>
<li><a href="https://github.com/tyru/open-browser.vim">tyru/open-browser.vim</a></li>
</ul>


<p>vimから指定したURLをブラウザで立ち上げるプラグイン。
quickrunと組み合わせて使った。</p>

<p>これらのプラグインを導入した後、vimrcに以下の記述を追加。</p>

<pre><code>let g:quickrun_config = {}
let g:quickrun_config.mkd = {
            \ 'outputter' : 'browser',
            \   'command': 'pandoc',
            \   'exec': '%c --from=markdown --to=html %o %s %a',
            \ }
</code></pre>

<p>pandocはmarkdownのテキストをhtmlに変換するコマンド。
他にももっといいのがあるらしいのだが、aptで簡単に導入できるので今回はこれを使った。</p>

<p>これで&lt;Leader>rでブラウザで仕上がりがプレビューできる。</p>

<p>参考：<br/>
<a href="http://blog.glidenote.com/blog/2013/01/10/vim-quickrun-marked/">vim-quickrunとMarkedでmarkdown編集が快適になった &ndash; Glide Note -グライドノート</a><br/>
<a href="http://vim-users.jp/2011/09/hack230/">Vim-users.jp &ndash; Hack #230: Markdown形式の文書を書く2 (quickrun0.5.0対応版)</a></p>

<p>本当はリアルタイムでプレビューとかする方法もあるらしいが、とりあえずこれで満足した。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tig便利]]></title>
    <link href="http://garasubo.github.com/blog/2013/03/24/tig/"/>
    <updated>2013-03-24T15:25:00+09:00</updated>
    <id>http://garasubo.github.com/blog/2013/03/24/tig</id>
    <content type="html"><![CDATA[<p>Gitの変更履歴をとても便利に閲覧することができるtigがなかなか。<br/>
詳しくは<a href="http://qiita.com/items/4ce9918b6dd6971d60e4">Tig の表示方法あれこれ #git #AdventCalendar #tig
&ndash; Qiita</a></p>

<p>gitkのCUI版みたいなのり。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[VimShellを久々に使ってみたら便利だった]]></title>
    <link href="http://garasubo.github.com/blog/2013/03/03/title/"/>
    <updated>2013-03-03T20:59:00+09:00</updated>
    <id>http://garasubo.github.com/blog/2013/03/03/title</id>
    <content type="html"><![CDATA[<p>以前、VimShellを使おうとして入れてみたのだが、はっきりとした理由は忘れたが、いまいちなので使わなかった。
が、久々に使ってみると普通のシェルのように使えるようになっていた。</p>

<h2>install</h2>

<p><a href="https://github.com/Shougo/vimshell">ここ</a>から</p>

<p>導入にはvimprocが必要で、加えてunite.vimとneocomplcacheがないと、一部の拡張機能が使えない。</p>

<h2>使い方</h2>

<p>:VimShellでshellになる<br/>
インサートモードで入力、コマンドモードでは普通にいつものvimみたいに動いて、
ヤンクとかもできる。<br/>
インサートモードではCtrl+lでコマンドの履歴表示、tabで補完がつかえる。<br/>
:VimShellPopで画面の一部でVimshellが起動するのでちょっとしたコマンドを起動するには便利。</p>

<pre><code>:VimShellInteractive [任意のインタプリタ]
</code></pre>

<p>はスクリプト言語を走らせるのにはかなり便利で、vimで編集しているテキストをそのインタプリタに送りつけるという事ができる。</p>

<p>非同期でコマンドを実行してくれるので、
コンパイルしながらちょっとコードの確認とかいうこともできる。</p>

<p>以前はインタプリタはiexeとかしないと動かなかったんだけど、そういうこともないみたい。</p>

<h2>欠点</h2>

<p>bashrcやzshrcとの連携機能は無いので、そっちで独自の設定をみっちりやっていると使いにくいかもしれない。<br/>
エイリアスくらいなら自動変換ツールくらい誰かつくっていそうなものだが。</p>

<p>コマンドの補完はやはり賢くない気がする。加えて、個人的にneocomlcacheの動作がイマイチだと思ったので普段は使わないのだが、
これを使わないと、ファイル名補完くらいしか効かない。</p>

<p>あと、gnuplot -persistでプロットしたグラフがgnuplot終了後消えてしまった。</p>

<p>とかまあまあ、完全なシェルとしてはさすがに使えないにしても、十分に使う価値のあるツールだとは思う。<br/>
更新も活発だし、作者はzshを目標としているらしいので、これからもどんどん良くなっていくのではないでしょうか。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git Pullをrebaseで行う]]></title>
    <link href="http://garasubo.github.com/blog/2013/02/22/new-post/"/>
    <updated>2013-02-22T14:52:00+09:00</updated>
    <id>http://garasubo.github.com/blog/2013/02/22/new-post</id>
    <content type="html"><![CDATA[<p>複数人でリモートのレポジトリをいじるとリモートの変更を
git pullでひっぱって来ないといけないわけだが、
git pullはremoteの変更をgit fetchして取ってきてから、
その変更を自分の追跡ブランチにmergeをするということをしている。<br/>
そのため、場合によっては無駄にマージコミットができてしまい、気が分岐しているように見えて、
ログの参照性をさげてしまう。<br/>
そこでpull時にmergeの代わりにrebaseを使い、そのようなことを避けるオプションがある。</p>

<pre><code>git pull --rebase
</code></pre>

<p><a href="http://keijinsonyaban.blogspot.jp/2010/11/git-tips.html">見えないチカラ: 【翻訳】あなたの知らないGit Tips</a>によると、</p>

<pre><code>git config --global pull.rebase true
</code></pre>

<p>としてあげると全追跡ブランチでpull時はオプション無しでrebaseを使うようになる。(Git 1.7.9から)</p>

<p>ただし、rebaseでpullしてくると</p>

<pre><code>1. 追跡ブランチからブランチを切る
2. そのブランチに対して追跡ブランチにマージコミットを打つ（その間、追跡ブランチには何もコミットしていない）
3. 追跡ブランチでpull
</code></pre>

<p>とすると、マージコミットが消えて、その追跡ブランチからブランチを切ったという情報が消えてしまった。<br/>
これはマージコミットをリバートするときはどちらを残すか明示的に指定しないといけないように、
どちらが本来の流れか分からなくなるからか？<br/>
にわかだからよくわかりません＞＜</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gitでのミスリカバリー]]></title>
    <link href="http://garasubo.github.com/blog/2012/12/28/new-post/"/>
    <updated>2012-12-28T19:21:00+09:00</updated>
    <id>http://garasubo.github.com/blog/2012/12/28/new-post</id>
    <content type="html"><![CDATA[<h2>マージコミットをリバート</h2>

<p>うっかり間違ったブランチで&mdash;no-ffでmergeを打ってしまった場合、
revertでそのコミットの変更を消すコミットをつくることができる。<br/>
ただし、このときどちらのブランチを残すのかという事を指示してあげる必要がある。<br/>
git logなどで、その時のマージコミットのログを見ると、どのコミット同士をマージしたのかということが書いてある。<br/>
それを見てどちらを残すかを-mオプションで指定する。</p>

<p>詳しくは<a href="http://books.google.co.jp/books?id=8DAvoM4OMxEC&amp;printsec=frontcover&amp;hl=ja#v=onepage&amp;q&amp;f=false">ここ</a>の80ページ目あたりが親切。</p>

<h2>リモートレポジトリに対してリセットをする</h2>

<p><a href="http://tmtms.hatenablog.com/entry/20101221/git">Gitでリモートリポジトリを巻き戻す &ndash; @tmtms のメモ</a>を参考にした。</p>

<p>まず、リセットしたいレポジトリのバックアップレポジトリをつくる。<br/>
これはいざ間違えた時の対策。</p>

<pre><code>git push origin tar_bak
</code></pre>

<p>つづいてgit reflogして戻したい地点を見つける</p>

<pre><code>******* HEAD@{0}: hoge
******* HEAD@{1}: hogehoge
******* HEAD@{2}: hogehogehoge
******* HEAD@{3}: hogehogehogehoge
...
</code></pre>

<p>hogehogehogeの地点まで戻りたいとして、</p>

<pre><code>git push -f origin HEAD@{2}:tar
</code></pre>

<p>とすればよい。こうすると、origin/tarの指すコミットが移動する。</p>

<p>他の人にも影響することなので、やるときは注意。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ubuntuのgccでリンクのオプションが無視される問題について]]></title>
    <link href="http://garasubo.github.com/blog/2012/11/26/new-post/"/>
    <updated>2012-11-26T14:17:00+09:00</updated>
    <id>http://garasubo.github.com/blog/2012/11/26/new-post</id>
    <content type="html"><![CDATA[<p>Ubuntuを10.04から12.04にアップデートした際、
gccで-lで指定したファイルが全然リンクされないという問題があった。
たとえば、</p>

<pre><code>gcc -lm main.c
</code></pre>

<p>として、main.cで普通にmathライブラリを使うようなファイルを書くと、
そんな関数の実体見つからんよ、と怒られていた。</p>

<p>ちょっと検索したらこんなの見つかった。<br/>
<a href="https://forums.ubuntulinux.jp/viewtopic.php?id=13673">Ubuntu日本語フォーラム / math.h へのリンクがうまくいかない</a><br/>
どうやら、Ubuntuのあるバージョンからgccの&mdash;as-neededというオプションが
デフォルトで有効になるような親切設計になったらしく、
これがあると-lのオプションはソースファイルの後に置かないと無視されるようになるらしい。
なので、</p>

<pre><code>gcc main.c -lm
</code></pre>

<p>とすればいいのだが、makeの暗黙ルールでLDFLAGSはソースの前に置かれるようなっているので、なんかルール書き換えるのは癪。</p>

<p>そこで、LDFLAGSに</p>

<pre><code>-Wl,--no-as-needed
</code></pre>

<p>というオプションを追加してやると、&mdash;as-neededオプションが無効化された。</p>

<p>しかし、なんでこんなオプションをデフォルトで有効にしてしまったのか。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gitでのbranchでの開発]]></title>
    <link href="http://garasubo.github.com/blog/2012/11/20/git/"/>
    <updated>2012-11-20T21:49:00+09:00</updated>
    <id>http://garasubo.github.com/blog/2012/11/20/git</id>
    <content type="html"><![CDATA[<p>最近何かとgitを使うことが多くなったので、branchの作り方から
mergeの仕方まできちんと学ばなきゃなと思い立って色々調べた。</p>

<h2>リモートブランチの扱い方</h2>

<p><a href="http://d.hatena.ne.jp/nayutaya/20090519/1242701594">&ldquo;gitのリモートブランチを使って作業を行う流れのメモ &ndash; 那由多屋 開発日誌&rdquo;</a></p>

<h2>merge</h2>

<p>ブランチつくったら、あとでマージしなきゃいけない。
実はgitのマージにはいくつか種類があるらしく、これはきちんと把握しておく必要が有りそう。<br/>
<a href="http://d.hatena.ne.jp/sinsoku/20111025/1319497900">&ldquo;図で分かるgit-mergeの&mdash;ff, &mdash;no-ff, &mdash;squashの違い &ndash; アジャイルSEを目指すブログ&rdquo;</a><br/>
これを読む限り、基本的には&mdash;no&mdash;ffでマージコミットをきちんとつくるのが
あとでログ見返すときにも良さそうな気がする。</p>

<h2>うっかりマージミスした時の対処。</h2>

<p>commitを取り消すコマンドであるresetは使い方を誤るととんでもないことになるので気をつけなければならない。
このへんが参考になりそう。<br/>
<a href="http://d.hatena.ne.jp/ToMmY/20110719/1311034743">git で merge をとりけす法 &ndash; ToMmY Makes Love with Codes</a><br/>
<a href="http://projects.tsuntsun.net/~nabeken/diary/Sysadmin/git-7.html">~nabeken/diary/ : git で間違って merge してしまった場合 (fast forward でマージしてしまったのを取り消したい)</a></p>

<h2>rebaseコマンドについて</h2>

<p>誰かがrebaseコマンド使えない奴はgit使えるうちに入らないと言っていたので調べた。
コミットに対して直接変更を加えるので危ないことは確かっぽいが、
小さなmergeをしたい時とかはこっちのほうが良いのかもしれない。
少なくとも知っておいて損はないと思うので。<br/>
<a href="http://d.hatena.ne.jp/sinsoku/20110925/1316933393">図で分かるgit-rebase &ndash; アジャイルSEを目指すブログ</a></p>

<h2>間違ったブランチを変更してしまった！</h2>

<p>gitならこんなことまで出来るんだって感じ。
記事読んで理解するのにちょっと時間かかった。<br/>
<a href="http://d.hatena.ne.jp/ToMmY/20110914/1316024033">別のトピックブランチにしてしまった複数のコミットを移動する &ndash; ToMmY Makes Love with Codes</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sublime Text 2を使ってみる]]></title>
    <link href="http://garasubo.github.com/blog/2012/11/16/st2/"/>
    <updated>2012-11-16T09:55:00+09:00</updated>
    <id>http://garasubo.github.com/blog/2012/11/16/st2</id>
    <content type="html"><![CDATA[<p>こんな記事を見たのがきっかけ<br/>
<a href="http://liginc.co.jp/designer/archives/6774">”恋に落ちるエディタ”「Sublime Text」 完全入門ガイド！ | デザイナーブログ | 株式会社LIG</a></p>

<p>普段はvimを愛用して、たしかに単体のファイルを編集する分にはいいのだが、
ある程度のプロジェクトを管理するために便利なものはないかなあと思っていたが、これは便利そうだなと思った。</p>

<p>導入方法とかはさっきの記事にあるので割愛。<br/>
ただし、package controlのインストールのところだけはなんかコピペじゃうまくいかなかった。
<a href="http://wbond.net/sublime_packages/package_control/installation">公式</a>のところにあるのをコピペしたらうまくいった。</p>

<p>設定として、まずはvimキーバインドを使いたいので、
Preferences > Setting &mdash;Defaultを開き、</p>

<pre><code>"ignored_packages": ["Vintage"]
</code></pre>

<p>とかなっているのを</p>

<pre><code>"ignored_packages": []
</code></pre>

<p>としてやれば、Vintageというパッケージが有効化されvimのコマンドが使えるようになる。<br/>
参考:<a href="http://ginpen.com/2012/07/15/vim-for-sublime-text/">Sublime Text 2をvim風に操作するには、プラグインすら不要でした。設定の変更のみ。</a><br/>
ただし、すべてのコマンドが使えるわけでなく:eとか:qとかは使えない。</p>

<p>あと、タブをスペースに展開したかったので<br/>
<a href="http://d.hatena.ne.jp/soikw/20120603/1338713309">Sublime TextでHaskell編集時のタブをスペース4つにする</a>
にあった設定をSetting &mdash;Usersに追加した。</p>

<p>便利だと思う機能としてCtr-pでのファイルサーチで、
今までだと、あるディレクトリの下にあるファイルとかをそのディレクトリ
名をいちいち入力しなきゃならなかったのが、その手間が省けて便利。</p>

<p>他にもいろいろな便利なショートカットがあるらしく、<br/>
<a href="http://funatti.hatenablog.com/entry/2012/07/13/155629"> Emacs, Vim, Sublime Text 2 徹底比較</a><br/>
とかいう記事がそれなりにまとまっている。</p>

<p>とまあ、便利そうなんだけど、やっぱり新しいツールとだけあって自分はまださぐりさぐりの状態で使っている。<br/>
makeコマンドをsublimeから呼び出したいのだが、build systemとかいうのを使えばできるのか？</p>

<p>あとはgitとかとの連携もできるらしいけど、そのへんもよくわかんない。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress導入記]]></title>
    <link href="http://garasubo.github.com/blog/2012/11/14/new-post/"/>
    <updated>2012-11-14T10:38:00+09:00</updated>
    <id>http://garasubo.github.com/blog/2012/11/14/new-post</id>
    <content type="html"><![CDATA[<p>octopressを導入するまで</p>

<h2>ruby 1.9を導入</h2>

<p>octopressを動かすにはruby 1.9以上が必要。
自分のubuntu 12.04には1.8.7しか入っていなかったのでrvmというものをつかって導入。
rvmとはrubyの複数のバージョンを管理するためのツールで、これを使うとrubyの様々なバージョンをインストールすることが可能。</p>

<p>で、「rvm インストール」とかで検索したらいろいろな方法があるのだが、どうもうまくいかない。
twitterでヘルプを投げたところ@ompugaoさんから教えてもらった方法がうまくいった。</p>

<ol>
<li>curl -L get.rvm.io | bash -s stable</li>
<li>rvm requirementsで必要なパッケージを確認してinstall</li>
<li>rvm install ruby-1.9.3</li>
</ol>


<p>これをやる前にうっかりaptitudeでrvm-rubyをinstallしちゃったら</p>

<pre><code>It looks you are one of the happy Ubuntu users, 
RVM packaged by Ubuntu is old and broken, 
</code></pre>

<p>とか言われる。happyだから仕方ないね。
まあ、解決策もちゃんとでてきて
<a href="http://stackoverflow.com/questions/9056008/installed-ruby-1-9-3-with-rvm-but-command-line-doesnt-show-ruby-v/9056395#9056395">Installed Ruby 1.9.3 with RVM but command line doesn&rsquo;t show ruby -v</a>
の言われたとおりにすれば直った。</p>

<p>それで</p>

<pre><code>rvm 1.9.3
</code></pre>

<p>とかすれば、バージョン1.9.3が使える。が、シェルの設定でログインシェルとして使用するとかいうのをチェックしないとうまくいかない。</p>

<h2>octopress導入</h2>

<p><a href="http://blog.glidenote.com/blog/2011/11/07/install-octopress-on-github/">GithubとOctopressでモダンな技術系ブログを作ってみる</a>
あたりを参考にすれば何とかなる。</p>

<p>あとつまずいたのは、実際の記事を書くときになぜかファイルの文字コードがutf-8になっていなくてrake generateでコケたことくらいか。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Start Up]]></title>
    <link href="http://garasubo.github.com/blog/2012/11/12/start-up/"/>
    <updated>2012-11-12T23:15:00+09:00</updated>
    <id>http://garasubo.github.com/blog/2012/11/12/start-up</id>
    <content type="html"><![CDATA[<p>できつぁ</p>
]]></content>
  </entry>
  
</feed>
